import { createLocalVue, shallowMount } from '@vue/test-utils';
import axios from 'axios';
import sinon from 'sinon';
import ResetPasswordInit from '@/account/reset-password/init/reset-password-init.vue';
import type ResetPasswordInitComponent from '@/account/reset-password/init/reset-password-init.component';

type ResetPasswordInitComponentType = Vue & InstanceType<typeof ResetPasswordInitComponent>;

const localVue = createLocalVue();


const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
};

describe('Reset Component Init', () => {
      let resetPasswordInit: ResetPasswordInitComponentType;

    beforeEach(() => {
        axiosStub.post.reset();
        const wrapper = shallowMount<ResetPasswordInitComponentType>(ResetPasswordInit, {
            localVue,
        });
        resetPasswordInit = wrapper.vm;
    });

    it('should reset request be a success', async () => {
        // Given
        axiosStub.post.resolves();

        // When
        await resetPasswordInit.requestReset();

        // Then
        expect(resetPasswordInit.success).toBeTruthy();
    });

    it('should reset request fail as an error', async () => {
        // Given
        axiosStub.post.rejects({
            response: {
                status: null,
                data: {
                    type: null
                }
            }
        });

        // When
        resetPasswordInit.requestReset();
        await resetPasswordInit.$nextTick();

        // Then
        expect(resetPasswordInit.success).toBeNull();
        expect(resetPasswordInit.error).toEqual('ERROR');
    });
});
